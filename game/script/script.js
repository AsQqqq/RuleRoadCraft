const startScreen = document.getElementById('startScreen');
const gameArea = document.getElementById('gameArea');
const startButton = document.getElementById('startButton');
const canvas = document.getElementById('canvas');
const toolbox = document.getElementById('toolbox');
const gridSize = 12.5;
let draggedBlock = null;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç—É—Ä—ã
async function checkTexture(folder, texturePath) {
    try {
        const response = await fetch(`assets/${folder}/${texturePath}`);
        return response.ok;
    } catch {
        return false;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫ –∏–∑ folders.json
async function getFolders() {
    try {
        const response = await fetch('assets/folders.json');
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å folders.json');
        }
        const data = await response.json();
        return data.folders || [];
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ folders.json: ${error.message}`);
        return [];
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è toolbox
async function initToolbox() {
    const trash = document.createElement('div');
    trash.id = 'trash';
    trash.innerHTML = 'üóëÔ∏è';
    toolbox.appendChild(trash);

    const folders = await getFolders();

    for (const folder of folders) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è config.json
            const response = await fetch(`assets/${folder}/config.json`);
            if (!response.ok) {
                console.warn(`config.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ assets/${folder}`);
                continue;
            }
            const config = await response.json();

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if (!config.name || !config.version || !config.width || !config.height || !Array.isArray(config.texture) || config.texture.length === 0) {
                console.warn(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π config.json –≤ assets/${folder}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è`);
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä
            let textureValid = true;
            for (const texture of config.texture) {
                if (!(await checkTexture(folder, texture))) {
                    console.warn(`–¢–µ–∫—Å—Ç—É—Ä–∞ ${texture} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ assets/${folder}`);
                    textureValid = false;
                    break;
                }
            }
            if (!textureValid) continue;

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ toolbox
            const block = document.createElement('div');
            block.className = 'block';
            block.style.width = `${config.width}px`;
            block.style.height = `${config.height}px`;
            block.draggable = true;
            block.dataset.config = JSON.stringify(config);
            block.dataset.folder = folder;
            const img = document.createElement('img');
            img.src = `assets/${folder}/${config.texture[0]}`;
            img.onerror = () => {
                console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è ${folder}`);
                img.src = 'https://via.placeholder.com/50x50/cccccc?text=Error';
            };
            block.appendChild(img);
            toolbox.appendChild(block);
        } catch (error) {
            console.warn(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ assets/${folder}: ${error.message}`);
        }
    }

    if (toolbox.children.length <= 1) { // –¢–æ–ª—å–∫–æ –º—É—Å–æ—Ä–∫–∞
        const errorDiv = document.createElement('div');
        errorDiv.id = 'error';
        errorDiv.textContent = '–ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ assets';
        toolbox.appendChild(errorDiv);
    }
}

startButton.addEventListener('click', () => {
    startScreen.style.display = 'none';
    gameArea.style.display = 'flex';
    initToolbox();
});

toolbox.addEventListener('dragstart', (e) => {
    let block = e.target;
    if (!block.classList.contains('block')) {
        block = block.closest('.block');
    }
    if (block) {
        console.log('Dragstart from toolbox:', {
            config: block.dataset.config,
            folder: block.dataset.folder
        });
        e.dataTransfer.setData('text/plain', ''); // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±—Ä–∞—É–∑–µ—Ä–∞–º–∏
        e.dataTransfer.setData('config', block.dataset.config || '');
        e.dataTransfer.setData('folder', block.dataset.folder || '');
    } else {
        console.warn('Dragstart failed: no block found');
    }
});

canvas.addEventListener('dragstart', (e) => {
    let block = e.target;
    if (!block.classList.contains('block')) {
        block = block.closest('.block');
    }
    if (block) {
        console.log('Dragstart from canvas:', {
            config: block.dataset.config,
            folder: block.dataset.folder
        });
        draggedBlock = block;
        e.dataTransfer.setData('text/plain', '');
        e.dataTransfer.setData('isFromCanvas', 'true');
    } else {
        console.warn('Dragstart failed: no block found');
    }
});

canvas.addEventListener('dragover', (e) => {
    e.preventDefault();
});

canvas.addEventListener('drop', (e) => {
    e.preventDefault();
    const configData = e.dataTransfer.getData('config');
    const folder = e.dataTransfer.getData('folder');
    const isFromCanvas = e.dataTransfer.getData('isFromCanvas');
    console.log('Drop on canvas:', {
        config: configData,
        folder: folder,
        isFromCanvas: isFromCanvas,
        offsetX: e.offsetX,
        offsetY: e.offsetY
    });

    if (configData && folder) {
        // –ù–æ–≤—ã–π –±–ª–æ–∫ –∏–∑ toolbox
        try {
            const config = JSON.parse(configData);
            const snappedX = Math.round((e.offsetX - config.width / 2) / gridSize) * gridSize;
            const snappedY = Math.round((e.offsetY - config.height / 2) / gridSize) * gridSize;
            console.log('Creating new block:', { snappedX, snappedY, config });

            const block = document.createElement('div');
            block.className = 'block draggable';
            block.style.width = `${config.width}px`;
            block.style.height = `${config.height}px`;
            block.style.left = `${snappedX}px`;
            block.style.top = `${snappedY}px`;
            block.style.position = 'absolute';
            block.draggable = true;
            block.dataset.config = configData;
            block.dataset.folder = folder;
            const img = document.createElement('img');
            img.src = `assets/${folder}/${config.texture[0]}`;
            img.style.width = '100%';
            img.style.height = '100%';
            img.onerror = () => {
                console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è ${config.name}`);
                img.src = 'https://via.placeholder.com/50x50/cccccc?text=Error';
            };
            block.appendChild(img);
            canvas.appendChild(block);
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∞: ${error.message}`);
        }
    } else if (isFromCanvas && draggedBlock) {
        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–ª–æ–∫–∞ –Ω–∞ canvas
        try {
            const blockConfig = JSON.parse(draggedBlock.dataset.config || '{"width": 50, "height": 50}');
            const snappedX = Math.round((e.offsetX - blockConfig.width / 2) / gridSize) * gridSize;
            const snappedY = Math.round((e.offsetY - blockConfig.height / 2) / gridSize) * gridSize;
            console.log('Moving existing block:', { snappedX, snappedY });
            draggedBlock.style.left = `${snappedX}px`;
            draggedBlock.style.top = `${snappedY}px`;
            draggedBlock = null;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –±–ª–æ–∫–∞: ${error.message}`);
        }
    } else {
        console.warn('Drop failed: no valid config or folder data');
    }
});

toolbox.addEventListener('dragover', (e) => {
    e.preventDefault();
    if (e.target.id === 'trash') {
        e.target.classList.add('dragover');
    }
});

toolbox.addEventListener('dragleave', (e) => {
    if (e.target.id === 'trash') {
        e.target.classList.remove('dragover');
    }
});

toolbox.addEventListener('drop', (e) => {
    e.preventDefault();
    if (e.target.id === 'trash' && draggedBlock) {
        console.log('Removing block via trash');
        e.target.classList.remove('dragover');
        draggedBlock.remove();
        draggedBlock = null;
    }
});